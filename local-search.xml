<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git_study</title>
    <link href="/2025/05/12/git-study/"/>
    <url>/2025/05/12/git-study/</url>
    
    <content type="html"><![CDATA[<h1 id="自用常用命令"><a href="#自用常用命令" class="headerlink" title="自用常用命令"></a>自用常用命令</h1><hr><p>常用命令</p><ul><li>git status 可以查看当前状态</li><li>git log 查看提交版本链 （其中HEAD指向当前版本）</li><li><font style="color:#DF2A3F;">git log –graph</font> –pretty&#x3D;oneline –abbrev-commit   简略版本变化，也可以查看分支合并情况</li></ul><hr><p>版本选择</p><ul><li>git reset –hard HEAD^回退到上一个版本。</li><li><font style="color:#DF2A3F;background-color:#FBDE28;">git reflog  记录了每次commit的记录   可以配合git reset –hard “commit id”指定版本</font></li><li><code>git diff HEAD -- 文件名</code><font style="color:rgb(31, 41, 55);background-color:rgb(249, 250, 251);">命令可以查看工作区和版本库里面最新版本的区别：</font></li></ul><blockquote><p>补充</p><ul><li><code>git diff</code>   工作区 vs 暂存区</li><li><code>git diff --cached</code>   暂存区 vs 上次提交</li><li>git diff HEAD   工作区 vs 上次提交</li></ul></blockquote><hr><p>撤销缓存区修改</p><ul><li>git restore readme.txt 工作区中的修改尚未被提交到暂存区，撤销修改： </li><li>git restore –staged readme.txt将修改从暂存区撤除 工作区中的修改已被提交到暂存区，尚未被提交到本地仓库，撤销修改：</li></ul><hr><p>删除文件（本地仓库）</p><ul><li><code>git rm test.txt</code><strong><font style="color:rgb(31, 41, 55);background-color:rgb(249, 250, 251);"> 相当于是删除工作目录中的test.txt文件,并把此次删除操作提交到了暂存区</font></strong></li></ul><blockquote><p>使用rm file  可以使用git restore  file进行恢复，但是如果提交git rm file，则不可以了，需要如下命令</p><p>git restore –staged file</p><p>git restore  file</p></blockquote><ul><li>git checkout <commit_id> – readme.txt   从一个版本中恢复删除的文件</li></ul><hr><p>初始化仓库</p><ul><li><code>git remote add origin xxx.git</code> 远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</li><li>git push -u origin master  将当前master分支推送到远程仓库。加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来</li><li>之后提交 git push origin master</li></ul><hr><p>查看本地仓库连接信息</p><ul><li>git remote -v   查看远程仓库信息</li><li>git remote rm xx 此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。</li></ul><hr><p>创建分支</p><ul><li>git brach dev 创建</li><li>git checkout dev  切换到dev</li></ul><blockquote><p>简化 git checkout -b dev</p></blockquote><ul><li>git brach 查看当前分支</li></ul><hr><p>合并分支</p><p>如果创建分支并进行修改，切换到别的分支，是看不见新分支上的内容的。</p><blockquote><p>例如，创建dev分支。提交了1.txt文件，切换到master分支上是没有1.txt文件的</p></blockquote><p>可以将dev分支结果合并到master分支</p><ul><li>git merge dev</li></ul><p><code>= git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p><hr><p>删除分支</p><ul><li>git branch -d xxx</li></ul><hr><p>切换分支也可以使用switch</p><ul><li>git switch -c dev 创建并切换到新的<code>dev</code>分支，可以使用</li><li>git switch master  切换分支</li></ul><hr><p>合并分支冲突</p><ul><li>git merge dev   （当前master）</li></ul><p>冲突的话</p><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存</p><p>之后提交保存后的文件  git add  和git commi</p><hr><p>分支管理</p><ul><li>git merge –no-ff -m “merge with no-ff” dev   Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</li></ul><blockquote><p>解决原先的合并发至导致的dev分支删除情况，即无法查看分支的信息了</p></blockquote><hr><p>bug分支 ：将当前分支“储存起来”,创建新分支解决bug，完了后恢复现场(如果是另一个分支修改文件，是不可以直接切换分支的)</p><ul><li>git stash      可以使用多次，保存多个状态信息</li></ul><blockquote><p>$ git stash list   查看</p><p>stash@{0}: WIP on dev: c36220d test bug</p><p>stash@{1}: WIP on dev: c36220d test bug</p></blockquote><p>恢复</p><p>一是用<code>git stash apply</code>恢复，但是恢复后，<code>stash</code>内容并不删除，你需要用<code>git stash drop</code>来删除；</p><p>另一种方式是用<code>git stash pop</code>，恢复的同时把<code>stash</code>内容也删了</p><ul><li>git stash apply stash@{0}   恢复到指定的stash</li></ul><blockquote><p>在<code>master</code>分支上修复的bug，想要合并到当前<code>dev</code>分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p></blockquote><p>清除</p><ul><li>git stash clear</li><li>git stash drop stash@{1}</li><li>git stash drop (最近一次）</li></ul><hr><p>多人协作</p><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><hr><p>抓取分支</p><ol><li>如果远程存在dev分支，可以创建远程origin的dev分支到本地<ol><li>git checkout -b dev origin&#x2F;master</li></ol></li><li>如果远程没有dev分支，需要创建分支并推送</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git"># 创建本地分支 dev，并从主分支 main/master 上拉出来<br>git checkout -b dev main<br># 或者<br>git checkout -b dev origin/main<br><br>git push -u origin dev<br><br></code></pre></td></tr></table></figure><p>多人协作的工作模式通常是这样：</p><ol><li>首先，可以尝试用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>因为要配置用户名和账号信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git config --global user.name &quot;Your Name&quot;<br>git config --global user.email &quot;email@example.com&quot;<br><br></code></pre></td></tr></table></figure><p>如果你想查看当前仓库中（即局部配置）的用户信息，可以使用不带 <code>--global</code> 的版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git config user.name<br>git config user.email<br></code></pre></td></tr></table></figure><p>如果你想查看所有当前生效的 Git 配置信息（包括系统级、全局级、仓库级），可以使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git config --list<br></code></pre></td></tr></table></figure><p>这将列出所有 Git 配置项及其当前值。如果有多个层级的配置（如局部覆盖了全局），则显示生效的那个。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="初始化一个项目"><a href="#初始化一个项目" class="headerlink" title="初始化一个项目"></a>初始化一个项目</h2><p>在当前文件夹下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git init <br></code></pre></td></tr></table></figure><h2 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git add &quot;file&quot; / git add ./<br></code></pre></td></tr></table></figure><p>要查看 <strong>Git 暂存区（staging area）</strong> 的文件，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><p>这个命令会列出：</p><ul><li>已添加到暂存区、准备提交的文件（显示为“changes to be committed”）。</li><li>已修改但尚未加入暂存区的文件（显示为“changes not staged for commit”）。</li><li>未被跟踪的新文件（显示为“untracked files”）。</li></ul><h3 id="如果你只想列出已加入暂存区的文件："><a href="#如果你只想列出已加入暂存区的文件：" class="headerlink" title="如果你只想列出已加入暂存区的文件："></a>如果你只想列出已加入暂存区的文件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff --cached --name-only<br></code></pre></td></tr></table></figure><p>解释：</p><ul><li><code>--cached</code>：表示查看暂存区与上一次提交之间的差异。</li><li><code>--name-only</code>：只显示文件名，不显示具体的 diff 内容。</li></ul><h3 id="如果你想查看这些文件的具体改动内容："><a href="#如果你想查看这些文件的具体改动内容：" class="headerlink" title="如果你想查看这些文件的具体改动内容："></a>如果你想查看这些文件的具体改动内容：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff --cached<br></code></pre></td></tr></table></figure><p>这个命令会显示暂存区中文件相对于最近一次提交的具体差异（diff）。</p><p>是否需要演示一个完整的工作流示例？</p><h2 id="提交到仓库"><a href="#提交到仓库" class="headerlink" title="提交到仓库"></a>提交到仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git commit -m &quot;注释&quot;<br></code></pre></td></tr></table></figure><h2 id="具体案例"><a href="#具体案例" class="headerlink" title="具体案例"></a>具体案例</h2><p>好的，这里是一个 <strong>完整的 Git 工作流示例</strong>，包括文件的创建、修改、添加到暂存区、查看暂存区内容等操作，适合理解 Git 各个阶段的变化。</p><hr><h3 id="✅-初始准备"><a href="#✅-初始准备" class="headerlink" title="✅ 初始准备"></a>✅ 初始准备</h3><ol><li><strong>创建一个新的 Git 仓库（如果没有仓库的话）：</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> demo-repo<br><span class="hljs-built_in">cd</span> demo-repo<br>git init<br></code></pre></td></tr></table></figure><hr><h3 id="📝-步骤-1：创建并编辑文件"><a href="#📝-步骤-1：创建并编辑文件" class="headerlink" title="📝 步骤 1：创建并编辑文件"></a>📝 步骤 1：创建并编辑文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello Git&quot;</span> &gt; file.txt<br></code></pre></td></tr></table></figure><p>此时，<code>file.txt</code> 是一个新文件，尚未被 Git 跟踪。</p><hr><h3 id="🔍-步骤-2：查看当前状态"><a href="#🔍-步骤-2：查看当前状态" class="headerlink" title="🔍 步骤 2：查看当前状态"></a>🔍 步骤 2：查看当前状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><p>输出类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">Untracked files:<br>  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)<br>    file.txt<br></code></pre></td></tr></table></figure><hr><h3 id="➕-步骤-3：将文件添加到暂存区"><a href="#➕-步骤-3：将文件添加到暂存区" class="headerlink" title="➕ 步骤 3：将文件添加到暂存区"></a>➕ 步骤 3：将文件添加到暂存区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add file.txt<br></code></pre></td></tr></table></figure><hr><h3 id="🔍-步骤-4：再次查看状态"><a href="#🔍-步骤-4：再次查看状态" class="headerlink" title="🔍 步骤 4：再次查看状态"></a>🔍 步骤 4：再次查看状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><p>输出类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">Changes to be committed:<br>  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)<br>    new file:   file.txt<br></code></pre></td></tr></table></figure><p>此时 <code>file.txt</code> 已经在暂存区中。</p><hr><h3 id="👁️-步骤-5：查看暂存区内容"><a href="#👁️-步骤-5：查看暂存区内容" class="headerlink" title="👁️ 步骤 5：查看暂存区内容"></a>👁️ 步骤 5：查看暂存区内容</h3><ul><li>查看已暂存文件名：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff --cached --name-only<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">file.txt<br></code></pre></td></tr></table></figure><ul><li>查看暂存区的实际改动内容：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff --cached<br></code></pre></td></tr></table></figure><hr><h3 id="✅-步骤-6：提交暂存区的更改"><a href="#✅-步骤-6：提交暂存区的更改" class="headerlink" title="✅ 步骤 6：提交暂存区的更改"></a>✅ 步骤 6：提交暂存区的更改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;Add file.txt&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="🌀-可选：修改文件并观察状态变化"><a href="#🌀-可选：修改文件并观察状态变化" class="headerlink" title="🌀 可选：修改文件并观察状态变化"></a>🌀 可选：修改文件并观察状态变化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;New line&quot;</span> &gt;&gt; file.txt<br>git status<br></code></pre></td></tr></table></figure><p>输出将显示 <code>file.txt</code> 被修改但尚未再次加入暂存区。</p><h1 id="版本管理-常用的"><a href="#版本管理-常用的" class="headerlink" title="版本管理   常用的"></a>版本管理   常用的</h1><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><ol><li>使用git log可以查看当前提交版本情况</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git log<br>commit e487ae96fda82c3b8ad5e148fb0d835e8ffdf023 (HEAD -&gt; master)<br>Author: xx &lt;xx@qq.com&gt;<br>Date:   Sun May 11 16:24:12 2025 +0800<br><br>    第三次尝试<br><br>commit bab0c45fea79dd42b7be8ff6a89b1d5786c244b9<br>Author: xx &lt;xx@qq.com&gt;<br>Date:   Sun May 11 15:54:31 2025 +0800<br><br>    append<br><br>commit 3d3b7ea699cdc96bc98c2f7f2def2bda1ae09fda<br>Author: xx &lt;xx@qq.com&gt;<br>Date:   Sun May 11 15:52:25 2025 +0800<br><br>    write a readme file<br><br></code></pre></td></tr></table></figure><ol start="2"><li>可以使用git reset –hard HEAD^回退到上一个版本。</li></ol><blockquote><p><code>--hard</code>参数有啥意义？<code>--hard</code>会回退到上个版本的已提交状态，而<code>--soft</code>会回退到上个版本的未提交状态，<code>--mixed</code>会回退到上个版本已添加但未提交的状态。</p></blockquote><p>这里回退后结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs git">commit bab0c45fea79dd42b7be8ff6a89b1d5786c244b9 (HEAD -&gt; master)<br>Author: xx &lt;xx@qq.com&gt;<br>Date:   Sun May 11 15:54:31 2025 +0800<br><br>    append<br><br>commit 3d3b7ea699cdc96bc98c2f7f2def2bda1ae09fda<br>Author: xx &lt;xx@qq.com&gt;<br>Date:   Sun May 11 15:52:25 2025 +0800<br><br>    write a readme file<br><br></code></pre></td></tr></table></figure><ol start="3"><li>也可以使用git reset –hard e487ae 回退到之前的版本</li></ol><h2 id="管理和修改"><a href="#管理和修改" class="headerlink" title="管理和修改"></a>管理和修改</h2><p><font style="color:rgb(31, 41, 55);background-color:rgb(249, 250, 251);">Git跟踪并管理的是修改，而非文件 （也就是修改一个字符也会跟踪）</font></p><p><font style="color:rgb(31, 41, 55);background-color:rgb(249, 250, 251);"></font></p><h2 id="撤销修改-缓存区）"><a href="#撤销修改-缓存区）" class="headerlink" title="撤销修改(缓存区）"></a>撤销修改(缓存区）</h2><p>如果想撤销暂存区(git add）内部的文件，可以使用下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git status<br>On branch master<br>Changes to be committed:<br>  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)<br>        new file:   test<br>        new file:   test.txt<br><br><br>$ git restore --staged test<br><br>$ git status<br>On branch master<br>Changes to be committed:<br>  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)<br>        new file:   test.txt<br><br>Untracked files:<br>  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)<br>        test<br><br></code></pre></td></tr></table></figure><p>1、工作区中的修改尚未被提交到暂存区，撤销修改：git restore readme.txt </p><p>2、工作区中的修改已被提交到暂存区，尚未被提交到本地仓库，撤销修改：git restore –staged readme.txt将修改从暂存区撤除，然后再用git restore readme.txt将修改从工作区撤除。 </p><p>3、修改已被提交到本地仓库，撤销修改：假如该次提交只提交了这一个修改，则可用git reset –hard CommitID恢复到提交前的版本。也可以用git revert命令反转该次提交。</p><p>但是如果该次提交涉及了多个文件的多处修改，这样操作会将其他的修改一并清除。此时我们可以用git reset命令指明文件和预期的恢复ID来将修改从暂存区中移除。例如git reset HEAD^ readme.txt是将此文件恢复到次新版。然后git restore readme.txt将修改从工作区撤除。然后再git commit -m msg提交到本地仓库</p><p>查看文件是否修改</p><table><thead><tr><th>命令</th><th>比较内容</th></tr></thead><tbody><tr><td><code>git diff</code></td><td>工作区 vs 暂存区</td></tr><tr><td><code>git diff --cached</code></td><td>暂存区 vs 上次提交</td></tr><tr><td><code>git diff HEAD</code></td><td>工作区 vs 上次提交</td></tr></tbody></table><h2 id="删除文件-本地仓库"><a href="#删除文件-本地仓库" class="headerlink" title="删除文件 (本地仓库)"></a>删除文件 (本地仓库)</h2><ol><li>本地删除 rm file</li><li>git status可以查看删除了什么</li><li>git rm file   <code>git rm &lt;file&gt;</code>和<code>git add&lt;file&gt;</code>效果是一样的。</li><li>git commit -m “”   提交到本地仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs git">ccc@cccwl MINGW32 /d/project/git_study/sty_one (master)<br>$ rm 11.txt<br><br>ccc@cccwl MINGW32 /d/project/git_study/sty_one (master)<br>$ git status<br>On branch master<br>Changes to be committed:<br>  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)<br>        modified:   11.txt<br><br>Changes not staged for commit:<br>  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)<br>        deleted:    11.txt<br>        <br>$ git rm 11.txt<br>rm &#x27;11.txt&#x27;<br><br>$ git commit -m &quot;remove 11.txt&quot;<br>[master d2e6dc0] remove 11.txt<br> 1 file changed, 1 deletion(-)<br> delete mode 100644 11.txt<br><br></code></pre></td></tr></table></figure><hr><h3 id="分情况说明如何恢复被-git-rm-删除的文件："><a href="#分情况说明如何恢复被-git-rm-删除的文件：" class="headerlink" title="分情况说明如何恢复被 git rm 删除的文件："></a>分情况说明如何恢复被 <code>git rm</code> 删除的文件：</h3><hr><h3 id="1-情况-1：删除后还没提交"><a href="#1-情况-1：删除后还没提交" class="headerlink" title="1)情况 1：删除后还没提交"></a>1)情况 1：删除后还没提交</h3><p>如果你运行了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> readme.txt<br></code></pre></td></tr></table></figure><p>但**还没运行 **<code>**git commit**</code>，你可以直接恢复文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git restore readme.txt<br></code></pre></td></tr></table></figure><p>这会从上次提交中恢复被删除的文件（即恢复到 <code>HEAD</code> 状态）。</p><hr><h3 id="2-情况-2：删除后已经提交-可用"><a href="#2-情况-2：删除后已经提交-可用" class="headerlink" title="2)情况 2：删除后已经提交   可用"></a><font style="color:#DF2A3F;">2)情况 2：删除后已经提交   可用</font></h3><p>如果你运行了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> readme.txt<br>git commit -m <span class="hljs-string">&quot;删除了 readme.txt&quot;</span><br></code></pre></td></tr></table></figure><p>你可以通过以下方式恢复该文件：</p><p>方法 A：恢复文件到工作区（从历史版本中 checkout 出来）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout HEAD^ -- readme.txt<br></code></pre></td></tr></table></figure><p>解释：</p><ul><li><code>HEAD^</code> 表示上一个提交；</li><li><code>-- readme.txt</code> 表示只恢复这个文件。</li></ul><p>✅ 恢复后该文件会重新出现在工作区，你可以再次 <code>git add</code> 和 <code>git commit</code> 来重新添加它。</p><hr><p>方法 B（更通用）：查看历史版本并恢复指定提交中的文件</p><ol><li>查看提交历史，找到删除前的提交：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -- readme.txt<br></code></pre></td></tr></table></figure><p>按下 <code>q</code> 退出日志界面。</p><ol><li>使用你想恢复的提交哈希：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout &lt;commit_id&gt; -- readme.txt<br></code></pre></td></tr></table></figure><hr><h3 id="🔁-小结"><a href="#🔁-小结" class="headerlink" title="🔁 小结"></a>🔁 小结</h3><table><thead><tr><th>操作场景</th><th>恢复命令</th></tr></thead><tbody><tr><td>删除未提交</td><td><code>git restore readme.txt</code></td></tr><tr><td>删除并已提交</td><td><code>git checkout HEAD^ -- readme.txt</code><br/> 或指定 commit 恢复</td></tr><tr><td>恢复整个版本</td><td><code>git checkout &lt;commit_id&gt;</code><br/>（慎用，会切换整个项目状态）</td></tr></tbody></table><hr><p>需要我帮你生成一个示例，演示如何完整地删掉并恢复一个文件的全过程吗？</p><h1 id="分支管理-重点"><a href="#分支管理-重点" class="headerlink" title="分支管理  重点"></a><font style="background-color:#FBDE28;">分支管理  重点</font></h1><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><ul><li><code>git remote add origin xxx.git</code> 远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</li><li>git push -u origin master  将当前master分支推送到远程仓库。加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来</li><li>git push origin master  之后提交</li></ul><h2 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h2><p>git remote -v   查看远程仓库信息</p><p>git remote rm xx 此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。</p><h2 id="创建合并分支"><a href="#创建合并分支" class="headerlink" title="创建合并分支"></a>创建合并分支</h2><p>git brach dev 创建</p><p>git checkout dev  切换到dev</p><blockquote><p>简化 git checkout -b dev</p></blockquote><p>git brach 查看当前分支</p><hr><p>如果创建分支并进行修改，切换到别的分支，是看不见新分支上的内容的。</p><blockquote><p>例如，创建dev分支。提交了1.txt文件，切换到master分支上是没有1.txt文件的</p></blockquote><p>可以将dev分支结果合并到master分支</p><p>git merge dev</p><p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>主要是两个或多个分支代码冲突，需要手动修改</p><p>git merge dev   （当前master）</p><p>如果冲突，可以看到使用git status查看冲突文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs git">$ git status<br>On branch master<br>You have unmerged paths.<br>  (fix conflicts and run &quot;git commit&quot;)<br>  (use &quot;git merge --abort&quot; to abort the merge)<br><br>Unmerged paths:<br>  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)<br>        both modified:   readme.txt<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br></code></pre></td></tr></table></figure><p>具体文件内容</p><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存</p><p>之后提交保存后的文件  git add  和git commi</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>git merge –no-ff -m “merge with no-ff” dev   <font style="color:rgb(31, 41, 55);background-color:rgb(249, 250, 251);">Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</font></p><p>如果使用原先的merge，Git会用<code>Fast forward</code>模式，<font style="color:rgb(31, 41, 55);background-color:rgb(249, 250, 251);">但这种模式下，删除分支后，会丢掉分支信息。</font></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/34610697/1746975087090-2a6f7b1f-fc09-447b-b839-3598e43c11fc.png"></p><h2 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h2><p>bug分支 ：将当前分支“储存起来”,创建新分支解决bug，完了后恢复现场(如果是另一个分支修改文件，是不可以直接切换分支的)</p><ul><li>git stash      可以使用多次，保存多个状态信息</li></ul><blockquote><p>$ git stash list   查看</p><p>stash@{0}: WIP on dev: c36220d test bug</p><p>stash@{1}: WIP on dev: c36220d test bug</p></blockquote><p>恢复</p><p>一是用<code>git stash apply</code>恢复，但是恢复后，<code>stash</code>内容并不删除，你需要用<code>git stash drop</code>来删除；</p><p>另一种方式是用<code>git stash pop</code>，恢复的同时把<code>stash</code>内容也删了</p><ul><li>git stash apply stash@{0}   恢复到指定的stash</li></ul><blockquote><p>在<code>master</code>分支上修复的bug，想要合并到当前<code>dev</code>分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p></blockquote><h2 id="feature分支"><a href="#feature分支" class="headerlink" title="feature分支"></a>feature分支</h2><p>新功能在新的分支上进行</p><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git push origin master<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git push origin dev<br></code></pre></td></tr></table></figure><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><hr><p>抓取分支</p><ol><li>如果远程存在dev分支，可以创建远程origin的dev分支到本地<ol><li>git checkout -b dev origin&#x2F;master</li></ol></li><li>如果远程没有dev分支，需要创建分支并推送</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git"># 创建本地分支 dev，并从主分支 main/master 上拉出来<br>git checkout -b dev main<br># 或者<br>git checkout -b dev origin/main<br><br>git push -u origin dev<br><br></code></pre></td></tr></table></figure><p>多人协作的工作模式通常是这样：</p><ol><li>首先，可以尝试用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/05/09/hello-world/"/>
    <url>/2025/05/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/06/10/test-write/"/>
    <url>/2021/06/10/test-write/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><p>nihao,nishem</p><p>sjhi</p><img src="/2021/06/10/test-write/test.png" class="" title="图片引用方法一"><p><img src="/images/test.png" alt="图片引用方法三"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
